#include <iostream>
#include <fstream>

#include "AnaHPC.H"

#include "TArtNEBULAHPC.hh"

#include "TTree.h"
#include "TMath.h"

#include "loadPar.H"

AnaHPC::AnaHPC():
  AnaModule("HPC"),
  fNEBULAParameters(NULL),
  fCalibNEBULAHPC(NULL),
  fCalibNEBULA(NULL) {
  nebulaNum = 0;
  nebulaID = new Int_t[144];
  nebulaQU = new Double_t[144];
  nebulaQD = new Double_t[144];
  nebulaTU = new Double_t[144];
  nebulaTD = new Double_t[144];
  nebulaTA = new Double_t[144];
  nebulaX = new Double_t[144];
  nebulaY = new Double_t[144];
  nebulaZ = new Double_t[144];
  nebulaTURaw = new Double_t[144];
  nebulaTDRaw = new Double_t[144];
  
  nebulaDT = new Double_t[144];
  nebulaDTS = new Double_t[144];

  nebulaQURaw = new Double_t[144];
  nebulaQDRaw = new Double_t[144];
  nebulaQUPed = new Double_t[144];
  nebulaQDPed = new Double_t[144];
  nebulaQPed = new Double_t[144];

  hpcNum = 0;
  hpcID = new Int_t[144];
  
  //tofOffset = new Double_t[144];
}

AnaHPC::~AnaHPC(){    
  DeleteAll();
  delete nebulaID;
  delete nebulaQU;
  delete nebulaQD;
  delete nebulaTU;
  delete nebulaTD;
  delete nebulaTA;
  delete nebulaX;
  delete nebulaY;
  delete nebulaZ;

  delete nebulaTURaw;
  delete nebulaTDRaw;
    
  delete nebulaDT;
  delete nebulaDTS;

  delete nebulaQURaw;
  delete nebulaQDRaw;
  delete nebulaQUPed;
  delete nebulaQDPed;
  delete nebulaQPed;

  delete hpcID;
  
}

void AnaHPC::InitParameter(){
  fNEBULAParameters = TArtSAMURAIParameters::Instance();
  fNEBULAParameters->LoadParameter((char*)"db/NEBULA.xml");
  fNEBULAParameters->LoadParameter((char*)"db/NEBULAHPC.xml");

  // tdc calibration using 6th pol //
  int order = 6;
  parTU = loadParU(order);
  parTD = loadParU(order);
  // tdc calibration using 6th pol //

  
  parLoaded = true;}

void AnaHPC::InitDetector(){
  if (!parLoaded) return;
  fCalibNEBULA = new TArtCalibNEBULA;
  fCalibNEBULAHPC = new TArtCalibNEBULAHPC;
  detLoaded = true;}

void AnaHPC::Analysis(){
  if (!detLoaded) return;
  anaFlag = true;

  fCalibNEBULA->ClearData();
  fCalibNEBULA->ReconstructData();

  fCalibNEBULAHPC->ClearData();
  fCalibNEBULAHPC->ReconstructData();
  
  nebulaNum = 0;
  hpcNum = 0;
  
  for (Int_t i = 0 ; i < 6 ; i++)
    nebulaMult[i] = 0;
  
  std::ifstream fin("../../dat/nebula_gamma_offset.dat");
  Double_t nebula_offset[120]={0,};
  for(Int_t i=0;i<120;i++)
    fin>>nebula_offset[i];
  fin.close();

  double slew_nebula_up_par0[120];
  double slew_nebula_up_par1[120];
  double slew_nebula_down_par0[120];
  double slew_nebula_down_par1[120];
  std::ifstream slew_nebula_up("../../dat/slew_2nd_nebula_up_pol1_layer0.dat");
  for(int i=0;i<120;i++)
    slew_nebula_up>>slew_nebula_up_par0[i]>>slew_nebula_up_par1[i];
  slew_nebula_up.close();
  std::ifstream slew_nebula_down("../../dat/slew_2nd_nebula_down_pol1_layer0.dat");
  for(int i=0;i<120;i++)
    slew_nebula_down>>slew_nebula_down_par0[i]>>slew_nebula_down_par1[i];
  slew_nebula_down.close();

  
  /*
    std::ifstream fin2("../../dat/nebula_slew_new.dat");
    Double_t nebula_slew_par0[120]={0,};
    Double_t nebula_slew_par1[120]={0,};
    Double_t nebula_slew_par2[120]={0,};
    Int_t nebula_gamma_entry[120]={0,};
    Double_t dummy;
    for(Int_t i=0;i<120;i++)
    fin2>>dummy>>nebula_slew_par0[i]>>nebula_slew_par1[i]>>nebula_slew_par2[i]>>nebula_gamma_entry[i];
    fin2.close();
  */
  
  
  
  for (Int_t i = 0 ; i < fCalibNEBULA->GetNumNEBULAPla() ; i++)
    {
      TArtNEBULAPla* pla = fCalibNEBULA->GetNEBULAPla(i);
      if (pla->GetHit()){
	nebulaID[nebulaNum] = pla->GetID();
	if (nebulaID[nebulaNum] < 121)
	  nebulaMult[(nebulaID[nebulaNum]-1)/30]++;
	else if (nebulaID[nebulaNum] < 145)
	  nebulaMult[(nebulaID[nebulaNum]-121)/12+4]++;
	else
	  continue;
	nebulaQU[nebulaNum] = pla->GetQUCal();
	nebulaQD[nebulaNum] = pla->GetQDCal();
	double TUCal = pla->GetTURaw();
	double TDCal = pla->GetTDRaw();

	
	nebulaTU[nebulaNum] = 0;
	nebulaTD[nebulaNum] = 0;

	int order = 6;
		
	

	for(int j=0;j<=order;j++)
	  {
	    nebulaTU[nebulaNum] += parTU[nebulaID[nebulaNum]-1][j]*TMath::Power(TUCal,j);
	    nebulaTD[nebulaNum] += parTD[nebulaID[nebulaNum]-1][j]*TMath::Power(TDCal,j);
	  }
	
	nebulaDT[nebulaNum] = nebulaTU[nebulaNum] - nebulaTD[nebulaNum];

	double qped = TMath::Sqrt( pla->GetQUPed() * pla->GetQDPed()  );
	
	double nebulaTUS
	  = nebulaTU[nebulaNum]
	  - slew_nebula_up_par0[nebulaID[nebulaNum]-1]
	  - slew_nebula_up_par1[nebulaID[nebulaNum]-1]*TMath::Power(qped,-0.5);

	double nebulaTDS
	  = nebulaTD[nebulaNum]
	  - slew_nebula_down_par0[nebulaID[nebulaNum]-1]
	  - slew_nebula_down_par1[nebulaID[nebulaNum]-1]*TMath::Power(qped,-0.5);

	nebulaDTS[nebulaNum] = nebulaTUS - nebulaTDS;
	
	if(TUCal<0)
	  {
	    nebulaTU[nebulaNum] = -9999;
	    nebulaDT[nebulaNum] = -9999;
	    nebulaDTS[nebulaNum] = -9999;
	  }
	if(TDCal<0)
	  {
	    nebulaTD[nebulaNum] = -9999;
	    nebulaDT[nebulaNum] = -9999;
	    nebulaDTS[nebulaNum] = -9999;
	  }
	

	
	nebulaTA[nebulaNum] = (nebulaTU[nebulaNum] + nebulaTD[nebulaNum])/2.;


	nebulaX[nebulaNum] = pla->GetPos(0);
	nebulaY[nebulaNum] = pla->GetPos(1);
	nebulaZ[nebulaNum] = pla->GetPos(2);
	nebulaTURaw[nebulaNum] = pla->GetTURaw();
	nebulaTDRaw[nebulaNum] = pla->GetTDRaw();
	nebulaQURaw[nebulaNum] = pla->GetQURaw();
	nebulaQDRaw[nebulaNum] = pla->GetQDRaw();
	nebulaQUPed[nebulaNum] = pla->GetQUPed();
	nebulaQDPed[nebulaNum] = pla->GetQDPed();

	
	nebulaQPed[nebulaNum] = TMath::Sqrt(nebulaQUPed[nebulaNum]*nebulaQDPed[nebulaNum]);

	

	
	nebulaNum++;
      }
    }
  if (nebulaNum < 1)
    anaFlag = false;

  //delete parTU;
  //delete parTD;

  

  for(Int_t i=0 ; i<fCalibNEBULAHPC->GetNumNEBULAHPC() ; i++)
    {
      TArtNEBULAHPC *hpc = fCalibNEBULAHPC->GetNEBULAHPC(i);
      hpcID[hpcNum] = hpc->GetID();

      hpcNum++;
      
    }
  if (hpcNum < 1)
    anaFlag = false;
  
  
}

void AnaHPC::DeleteAll(){
  if (fCalibNEBULA)    delete fCalibNEBULA;
  if (fCalibNEBULAHPC) delete fCalibNEBULAHPC;
  if (parTU) delete parTU;
  if (parTD) delete parTD;
}

void AnaHPC::SetTree(){ 
  AnaModule::SetTree();
  //std::cout<<" #########################################" <<std::endl;
  tree->Branch("nebulaNum",&nebulaNum,"nebulaNum/I");
  tree->Branch("nebulaMult",nebulaMult,"nebulaMult[6]/I");
  tree->Branch("nebulaID",nebulaID,"nebulaID[nebulaNum]/I");

  tree->Branch("nebulaQU",nebulaQU,"nebulaQU[nebulaNum]/D");
  tree->Branch("nebulaQD",nebulaQD,"nebulaQD[nebulaNum]/D");
  tree->Branch("nebulaTU",nebulaTU,"nebulaTU[nebulaNum]/D");
  tree->Branch("nebulaTD",nebulaTD,"nebulaTD[nebulaNum]/D");
  tree->Branch("nebulaTA",nebulaTA,"nebulaTA[nebulaNum]/D");
  tree->Branch("nebulaX",nebulaX,"nebulaX[nebulaNum]/D");
  tree->Branch("nebulaY",nebulaY,"nebulaY[nebulaNum]/D");
  tree->Branch("nebulaZ",nebulaZ,"nebulaZ[nebulaNum]/D");
  

  tree->Branch("nebulaDT",nebulaDT,"nebulaDT[nebulaNum]/D");
  tree->Branch("nebulaDTS",nebulaDTS,"nebulaDTS[nebulaNum]/D");

  tree->Branch("nebulaTURaw",nebulaTURaw,"nebulaTURaw[nebulaNum]/D");
  tree->Branch("nebulaTDRaw",nebulaTDRaw,"nebulaTDRaw[nebulaNum]/D");

  tree->Branch("nebulaQURaw",nebulaQURaw,"nebulaQURaw[nebulaNum]/D");
  tree->Branch("nebulaQDRaw",nebulaQDRaw,"nebulaQDRaw[nebulaNum]/D");

  
  tree->Branch("nebulaQUPed",nebulaQUPed,"nebulaQUPed[nebulaNum]/D");
  tree->Branch("nebulaQDPed",nebulaQDPed,"nebulaQDPed[nebulaNum]/D");
  tree->Branch("nebulaQPed",nebulaQPed,"nebulaQPed[nebulaNum]/D");


  tree->Branch("hpcNum",&hpcNum,"hpcNum/I");
  tree->Branch("hpcID",hpcID,"hpcID[hpcNum]/I");


  
  tree->SetAlias("nebulaQA","sqrt(nebulaQU*nebulaQD)");
}
