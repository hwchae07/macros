#include "AnaNEBslew.H"

#include <iostream>
#include <fstream>
#include "TFile.h"
#include "TTree.h"
#include "TMath.h"
#include "TCut.h"

void AnaNEBslew(Int_t runNum)
{
  TFile *file = new TFile(Form("../../root/run%04d.root.BeamPID",runNum),"READ");
  TTree *tree;
  file->GetObject("BeamPID",tree);
  tree->BuildIndex("EventNum");
  tree->AddFriend("NEBULA",Form("../../root/run%04d.root.NEBULA",runNum));
  tree->GetFriend("NEBULA")->BuildIndex("EventNum");

  std::ifstream fin2("../../dat/nebula_slew_new.dat");
  Double_t nebula_slew_par0[120]={0,};
  Double_t nebula_slew_par1[120]={0,};
  Double_t nebula_slew_par2[120]={0,};
  Int_t nebula_gamma_entry[120]={0,};
  Double_t dummy;
  for(Int_t i=0;i<120;i++)
    fin2>>dummy>>nebula_slew_par0[i]>>nebula_slew_par1[i]>>nebula_slew_par2[i]>>nebula_gamma_entry[i];
  fin2.close();

  std::ifstream tof("../../dat/nebula_gamma_offset.dat");
  Double_t tof_offset[120]={0,};
  for(Int_t i=0;i<120;i++)
    tof>>tof_offset[i];
  tof.close();
  
  
  Int_t RunNum,EventNum;
  Double_t f13Pla1TL,f13Pla1TR,f13Pla2TL,f13Pla2TR;
  Double_t tofc713;
  Double_t beamAoZ, beamZ;

  Int_t nebulaNum;
  Int_t* nebulaID;
  Double_t* nebulaTURaw;
  Double_t* nebulaTDRaw;
  Double_t* nebulaTU;
  Double_t* nebulaTU1;
  Double_t* nebulaTU2;
  Double_t* nebulaTD;
  Double_t* nebulaTD1;
  Double_t* nebulaTD2;
  Double_t* nebulaTA;
  Double_t* nebulaTA1;
  Double_t* nebulaTA2;
  Double_t* nebulaQUPed;
  Double_t* nebulaQDPed;
  Double_t* nebulaQPed;
  Double_t* nebulaTOF;
  Double_t* nebulaTOFU;
  Double_t* nebulaTOFD;
  Double_t* nebulaTOFU2;
  Double_t* nebulaTOFD2;
  Double_t* nebulaTOFSlew;
  Double_t* nebulaTOFUSlew;
  Double_t* nebulaTOFDSlew;

  Double_t* nebulaDT;

  Double_t* nebulaX;
  Double_t* nebulaY;
  Double_t* nebulaZ;
  Double_t* nebulaY2;

  nebulaID = new Int_t[144];
  nebulaTURaw = new Double_t[144];
  nebulaTDRaw = new Double_t[144];
  nebulaTU = new Double_t[144];
  nebulaTU1 = new Double_t[144];
  nebulaTU2 = new Double_t[144];
  nebulaTD = new Double_t[144];
  nebulaTD1 = new Double_t[144];
  nebulaTD2 = new Double_t[144];
  nebulaTA = new Double_t[144];
  nebulaTA1 = new Double_t[144];
  nebulaTA2 = new Double_t[144];
  nebulaQUPed = new Double_t[144];
  nebulaQDPed = new Double_t[144];
  nebulaQPed = new Double_t[144];
  nebulaTOF = new Double_t[144];
  nebulaTOFU = new Double_t[144];
  nebulaTOFU2 = new Double_t[144];
  nebulaTOFD = new Double_t[144];
  nebulaTOFD2 = new Double_t[144];
  nebulaTOFSlew = new Double_t[144];
  nebulaTOFUSlew = new Double_t[144];
  nebulaTOFDSlew = new Double_t[144];

  nebulaDT = new Double_t[144];
  
  nebulaX = new Double_t[144];
  nebulaY = new Double_t[144];
  nebulaZ = new Double_t[144];
  nebulaY2 = new Double_t[144];
  
  tree->SetBranchAddress("RunNum",&RunNum);
  tree->SetBranchAddress("EventNum",&EventNum);

  tree->SetBranchAddress("tofc713",&tofc713);  
  tree->SetBranchAddress("f13Pla1TL",&f13Pla1TL);
  tree->SetBranchAddress("f13Pla1TR",&f13Pla1TR);
  tree->SetBranchAddress("f13Pla2TL",&f13Pla2TL);
  tree->SetBranchAddress("f13Pla2TR",&f13Pla2TR);
	
  tree->SetBranchAddress("beamAoZ",&beamAoZ);
  tree->SetBranchAddress("beamZ",&beamZ);
  
  tree->SetBranchAddress("nebulaNum",&nebulaNum);
  tree->SetBranchAddress("nebulaID",nebulaID);
  tree->SetBranchAddress("nebulaTURaw",nebulaTURaw);
  tree->SetBranchAddress("nebulaTDRaw",nebulaTDRaw);
  tree->SetBranchAddress("nebulaTU",nebulaTU);
  //tree->SetBranchAddress("nebulaTU1",nebulaTU1);
  tree->SetBranchAddress("nebulaTU2",nebulaTU2);
  tree->SetBranchAddress("nebulaTD",nebulaTD);
  //tree->SetBranchAddress("nebulaTD1",nebulaTD1);
  tree->SetBranchAddress("nebulaTD2",nebulaTD2);
  tree->SetBranchAddress("nebulaTA",nebulaTA);
  //tree->SetBranchAddress("nebulaTA1",nebulaTA1);
  tree->SetBranchAddress("nebulaTA2",nebulaTA2);
  tree->SetBranchAddress("nebulaQUPed",nebulaQUPed);
  tree->SetBranchAddress("nebulaQDPed",nebulaQDPed);
  tree->SetBranchAddress("nebulaQPed",nebulaQPed);

  tree->SetBranchAddress("nebulaDT",nebulaDT);
  
  tree->SetBranchAddress("nebulaX",nebulaX);
  tree->SetBranchAddress("nebulaY",nebulaY);
  tree->SetBranchAddress("nebulaZ",nebulaZ);

  tree->SetBranchAddress("nebulaY2",nebulaY2);
  
  TFile *file2 = new TFile(Form("../../root/run%04d.root.NEBslew",runNum),"RECREATE");
  TTree *tree2 = new TTree("NEBslew","NEBslew");
  tree2->Branch("RunNum",&RunNum,"RunNum/I");
  tree2->Branch("EventNum",&EventNum,"EventNum/I");
  tree2->Branch("tofc713",&tofc713,"tofc713/D");
  tree2->Branch("beamAoZ",&beamAoZ,"beamAoZ/D");
  tree2->Branch("beamZ",&beamZ,"beamZ/D");

  tree2->Branch("nebulaNum",&nebulaNum,"nebulaNum/I");
  tree2->Branch("nebulaID",nebulaID,"nebulaID[nebulaNum]/I");
  tree2->Branch("nebulaTURaw",nebulaTURaw,"nebulaTURaw[nebulaNum]/D");
  tree2->Branch("nebulaTDRaw",nebulaTDRaw,"nebulaTDRaw[nebulaNum]/D");
  tree2->Branch("nebulaTU",nebulaTU,"nebulaTU[nebulaNum]/D");
  //tree2->Branch("nebulaTU1",nebulaTU1,"nebulaTU1[nebulaNum]/D");
  tree2->Branch("nebulaTU2",nebulaTU2,"nebulaTU2[nebulaNum]/D");
  tree2->Branch("nebulaTD",nebulaTD,"nebulaTD[nebulaNum]/D");
  //tree2->Branch("nebulaTD1",nebulaTD1,"nebulaTD1[nebulaNum]/D");
  tree2->Branch("nebulaTD2",nebulaTD2,"nebulaTD2[nebulaNum]/D");
  tree2->Branch("nebulaTA",nebulaTA,"nebulaTA[nebulaNum]/D");
  //tree2->Branch("nebulaTA1",nebulaTA1,"nebulaTA1[nebulaNum]/D");
  tree2->Branch("nebulaTA2",nebulaTA2,"nebulaTA2[nebulaNum]/D");
  tree2->Branch("nebulaQUPed",nebulaQUPed,"nebulaQUPed[nebulaNum]/D");
  tree2->Branch("nebulaQDPed",nebulaQDPed,"nebulaQDPed[nebulaNum]/D");
  tree2->Branch("nebulaQPed",nebulaQPed,"nebulaQPed[nebulaNum]/D");

  tree2->Branch("nebulaTOF",nebulaTOF,"nebulaTOF[nebulaNum]/D");
  tree2->Branch("nebulaTOFU",nebulaTOFU,"nebulaTOFU[nebulaNum]/D");
  tree2->Branch("nebulaTOFD",nebulaTOFD,"nebulaTOFD[nebulaNum]/D");
  tree2->Branch("nebulaTOFU2",nebulaTOFU2,"nebulaTOFU2[nebulaNum]/D");
  tree2->Branch("nebulaTOFD2",nebulaTOFD2,"nebulaTOFD2[nebulaNum]/D");
  tree2->Branch("nebulaTOFSlew",nebulaTOFSlew,"nebulaTOFSlew[nebulaNum]/D");
  tree2->Branch("nebulaTOFUSlew",nebulaTOFUSlew,"nebulaTOFUSlew[nebulaNum]/D");
  tree2->Branch("nebulaTOFDSlew",nebulaTOFDSlew,"nebulaTOFDSlew[nebulaNum]/D");

  tree2->Branch("nebulaDT",nebulaDT,"nebulaDT[nebulaNum]/D");

  tree2->Branch("nebulaX",nebulaX,"nebulaX[nebulaNum]/D");
  tree2->Branch("nebulaY",nebulaY,"nebulaY[nebulaNum]/D");
  tree2->Branch("nebulaZ",nebulaZ,"nebulaZ[nebulaNum]/D");
  tree2->Branch("nebulaY2",nebulaY2,"nebulaY2[nebulaNum]/D");
  
  for(Int_t i=0;i<tree->GetEntries();i++)
    {
      if(!(i%1000))
        {
          std::cout<<"Progress rate(%): " << (Double_t)i/(Double_t)tree->GetEntries()*100 << "\r";
          std::cout.flush();
        }

      tree->GetEntry(i);
      if(tree->GetEntryWithIndex(EventNum)<0) continue;

      Double_t t13 = (f13Pla1TL + f13Pla2TL + f13Pla1TR + f13Pla2TR)/4.;
      Double_t v_scint = 150;

      
      for(Int_t j=0;j<nebulaNum;j++)
	{
	  
	  Double_t qped = nebulaQPed[j];

	  if(nebulaTU[j] == -9999)
	    {
	      nebulaTOFU[j] = -9999;
	      nebulaTOFUSlew[j] = -9999;
	    }
	  else
	    {
	      nebulaTOFU[j] = nebulaTU[j] - t13;

	      nebulaTOFU[j] = nebulaTOFU[j] - tof_offset[nebulaID[j]-1];
	      //nebulaTOFU[j] = nebulaTOFU[j] - nebula_slew_par0[nebulaID[j]-1];
	      double distNEB = TMath::Sqrt(nebulaX[j]*nebulaX[j] + nebulaY[j]*nebulaY[j] + nebulaZ[j]*nebulaZ[j]);
	      nebulaTOFU[j] = nebulaTOFU[j] - distNEB/299.792458;

	      nebulaTOFU[j] = nebulaTOFU[j] + nebulaY[j]/v_scint;
	      nebulaTOFU2[j] = nebulaTU2[j] - t13;

	      /*
		nebulaTOFUSlew[j]
		= nebulaTOFU[j]
		- nebula_slew_par0[nebulaID[j]-1]
		- nebula_slew_par1[nebulaID[j]-1]*TMath::Power(qped,-1./4.)
		- nebula_slew_par2[nebulaID[j]-1]*TMath::Power(qped,-1./2.);
	      */
	    }

	  if(nebulaTD[j] == -9999)
	    {
	      nebulaTOFD[j] = -9999;
	      nebulaTOFUSlew[j] = -9999;
	    }
	  else
	    {
	      nebulaTOFD[j] = nebulaTD[j] - t13;

	      nebulaTOFD[j] = nebulaTOFD[j] - tof_offset[nebulaID[j]-1];
	      //nebulaTOFD[j] = nebulaTOFD[j] - nebula_slew_par0[nebulaID[j]-1];
	      double distNEB = TMath::Sqrt(nebulaX[j]*nebulaX[j] + nebulaY[j]*nebulaY[j] + nebulaZ[j]*nebulaZ[j]);
	      nebulaTOFD[j] = nebulaTOFD[j] - distNEB/299.792458;

	      //nebulaTOFD[j] = nebulaTOFD[j] - (1800 - nebulaY[j])/45;
	      nebulaTOFD[j] -= nebulaY[j]/v_scint;

	      nebulaTOFD2[j] = nebulaTD2[j] - t13;

	      
	      /*
		nebulaTOFDSlew[j]
		= nebulaTOFD[j]
		- nebula_slew_par0[nebulaID[j]-1]
		- nebula_slew_par1[nebulaID[j]-1]*TMath::Power(qped,-1./4.)
		- nebula_slew_par2[nebulaID[j]-1]*TMath::Power(qped,-1./2.);
	      */
	    }

	  if(nebulaTU[j] == -9999 || nebulaTD[j] == -9999)
	    {
	      nebulaTOF[j] = -9999;
	      nebulaTOFSlew[j] = -9999;
	    }
	  else
	    {
	      nebulaTOF[j] = nebulaTA[j] - t13;
	      nebulaTOF[j] = nebulaTOF[j] - tof_offset[nebulaID[j]-1];
	      double distNEB = TMath::Sqrt(nebulaX[j]*nebulaX[j] + nebulaY[j]*nebulaY[j] + nebulaZ[j]*nebulaZ[j]);
	      nebulaTOF[j] = nebulaTA[j] - distNEB/299.792458;
	      
	      nebulaTOFSlew[j]
		= nebulaTOF[j]
		- nebula_slew_par0[nebulaID[j]-1]
		- nebula_slew_par1[nebulaID[j]-1]*TMath::Power(qped,-1./4.)
		- nebula_slew_par2[nebulaID[j]-1]*TMath::Power(qped,-1./2.);
	    }
	  
	}
      
      tree2->Fill();
    }

  delete nebulaID;
  delete nebulaTURaw;
  delete nebulaTDRaw;
  delete nebulaTU;
  delete nebulaTU1;
  delete nebulaTU2;
  delete nebulaTD;
  delete nebulaTD1;
  delete nebulaTD2;
  delete nebulaTA;
  delete nebulaTA1;
  delete nebulaTA2;
  delete nebulaQUPed;
  delete nebulaQDPed;
  delete nebulaQPed;
  delete nebulaTOF;
  delete nebulaTOFU;
  delete nebulaTOFD;
  delete nebulaTOFU2;
  delete nebulaTOFD2;
  delete nebulaTOFSlew;
  delete nebulaTOFUSlew;
  delete nebulaTOFDSlew;

  delete nebulaX;
  delete nebulaY;
  delete nebulaZ;
  delete nebulaY2;
  /*
    delete neutID;
    delete neutTA;
    delete neutX;
    delete neutY;
    delete neutZ;
    delete neutIndex;
    delete neutNEB;
    delete neutVETO;
    delete neutFL1;
    delete neutTOF1;
    delete neutBeta1;
  */

  tree2->Print();
  tree2->Write();
  file2->Close();

  //fin.close();
}
